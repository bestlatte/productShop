#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require("../app");
var debug = require("debug")("hello-world:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/* ===== 🌟 雲端優化設定 ===== */
// 避免反向代理下的 keep-alive 邊界問題（Node 官方建議值）
server.keepAliveTimeout = 65000; // 65 秒
server.headersTimeout = 66000; // 比 keepAliveTimeout 略高

// 雲端/SIGTERM 優雅關閉（部署重啟時更乾淨）
process.on("SIGTERM", () => {
  console.log("收到 SIGTERM，正在優雅關閉伺服器...");
  server.close(() => {
    console.log("伺服器已關閉");
    process.exit(0);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
